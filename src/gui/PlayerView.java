/*  
 *  Programación y diseño orientado a objetos
 *  Grado en Ingeniería Informática
 * 
 *  2013 © Copyleft - All Wrongs Reserved
 *
 *  Ernesto Serrano <erseco@correo.ugr.es>
 * 
 */
package gui;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import napakalaki.Player;
import napakalaki.*;

public class PlayerView extends javax.swing.JPanel {

    private Player playerModel;
    private Napakalaki napakalakiModel;
    private NapakalakiView napakalakiView;

    public void setNapakalaki(Napakalaki model, NapakalakiView view) {

        this.napakalakiModel = model;
        this.napakalakiView = view;
               
        
    }
    


    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        // Se recorren los tesoros que contiene el panel,
        //    almacenando en un vector aquellos que están seleccionados.
        //    Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for (Component c : aPanel.getComponents()) {


            tv = (TreasureView) c;
            if (tv.isSelected()) {
                output.add(tv.getTreasure());
            }
        }
        return output;
    }

    public void setPlayer(Player model) {

        playerModel = model;

        //Ponemos el nombre y el nivel como BorderTitle (para ahorrar espacio)
        String nameLevelText = "Jugador: " + playerModel.getName() + " ";
        nameLevelText += "Nivel: " + Integer.toString(playerModel.getLevels());        
        
        this.setBorder(javax.swing.BorderFactory.createTitledBorder(nameLevelText));


        //lblGoldCoins.setText(Integer.toString(cultistModel.getGoldCoins()));

        //lblTreasureKind.setText(cultistModel.getType().toString());


        fillTreasurePanel(visibleTreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel(hiddenTreasures, playerModel.getHiddenTreasures());
        
        cultistView.setCultist(model);


        //Finalizar con la siguiente orden para que los cambios se hagan efectivos
        repaint();

        revalidate();
    }

    public void fillTreasurePanel(JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        //    al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure(t);
            aTreasureView.setVisible(true);
            aPanel.add(aTreasureView);
        }
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();

        this.setBorder(BorderFactory.createTitledBorder("Jugador"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btBuyLevels = new javax.swing.JButton();
        btMakeVisible = new javax.swing.JButton();
        btDiscardTreasure = new javax.swing.JButton();
        visibleTreasures = new javax.swing.JPanel();
        cultistView = new gui.CultistView();
        jScrollPane = new javax.swing.JScrollPane();
        hiddenTreasures = new javax.swing.JPanel();
        btMakePresent = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Jugador: Nombre Nivel: 0"));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btBuyLevels.setText("Comprar Niveles");
        btBuyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuyLevelsActionPerformed(evt);
            }
        });
        add(btBuyLevels, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, -1, -1));

        btMakeVisible.setText("Hacer Visible");
        btMakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMakeVisibleActionPerformed(evt);
            }
        });
        add(btMakeVisible, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 510, -1, -1));

        btDiscardTreasure.setText("Descartar Tesoro");
        btDiscardTreasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDiscardTreasureActionPerformed(evt);
            }
        });
        add(btDiscardTreasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 510, -1, -1));

        visibleTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder("Tesoros Visibles"));
        visibleTreasures.setMaximumSize(new java.awt.Dimension(560, 220));
        visibleTreasures.setMinimumSize(new java.awt.Dimension(560, 220));
        visibleTreasures.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        add(visibleTreasures, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 520, 230));
        add(cultistView, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, -1, -1));

        jScrollPane.setBackground(new java.awt.Color(238, 238, 238));
        jScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Tesoros Ocultos"));

        hiddenTreasures.setMaximumSize(new java.awt.Dimension(560, 220));
        hiddenTreasures.setMinimumSize(new java.awt.Dimension(560, 220));
        hiddenTreasures.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jScrollPane.setViewportView(hiddenTreasures);

        add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 670, 250));

        btMakePresent.setText("Regalar Tesoro");
        btMakePresent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMakePresentActionPerformed(evt);
            }
        });
        add(btMakePresent, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 510, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btDiscardTreasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDiscardTreasureActionPerformed


        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        this.napakalakiModel.discardVisibleTreasures(selVisible);

        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);

        this.napakalakiModel.discardHiddenTreasures(selHidden);

        setPlayer(napakalakiModel.getCurrentPlayer());

        this.repaint();

        
        this.napakalakiView.checkPendingBadStuff();


    }//GEN-LAST:event_btDiscardTreasureActionPerformed

    private void btMakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMakeVisibleActionPerformed

        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        napakalakiModel.makeTreasuresVisible(selHidden);

        setPlayer(napakalakiModel.getCurrentPlayer());

        this.repaint();
        
       this.napakalakiView.checkPendingBadStuff();

    }//GEN-LAST:event_btMakeVisibleActionPerformed

    private void btBuyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuyLevelsActionPerformed

        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);

        this.napakalakiModel.buyLevels(selVisible, selHidden);

        setPlayer(napakalakiModel.getCurrentPlayer());

        this.repaint();
        
        this.napakalakiView.checkPendingBadStuff();

    }//GEN-LAST:event_btBuyLevelsActionPerformed

    private void btMakePresentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMakePresentActionPerformed
       
        //Declaramos variables
        String result = "";
                
        //Cogemos el primer tesoro seleccionado
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);        
        
        if (selHidden.size() > 0) {
        
            //Seleccionamos el primero de los seleccioandos
            Treasure t = selHidden.get(0);
        
            //Hacemos el regalo
            result =  this.napakalakiModel.makePresent(t);
        
           
           
        } else {
        
            //Mostramos una advertencia
            result = "Debe seleccionar al menos un tesoro";
        
        }
        
        //Mostramos el mensaje
        JOptionPane.showMessageDialog(null, result);
        
    }//GEN-LAST:event_btMakePresentActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuyLevels;
    private javax.swing.JButton btDiscardTreasure;
    private javax.swing.JButton btMakePresent;
    private javax.swing.JButton btMakeVisible;
    private gui.CultistView cultistView;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
